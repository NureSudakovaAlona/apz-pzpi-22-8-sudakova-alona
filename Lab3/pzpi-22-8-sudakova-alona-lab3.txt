МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Катедра програмної інженерії




ЗВІТ
з лабораторної роботи № 3
з дисципліни «Архітектура програмного забезпечення»
на тему «Розробка програмної архітектури, створення та відлагодження програмного коду веб клієнта програмної системи»





Виконала
ст. гр. ПЗПІ-22-8
Судакова Альона
Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович



Харків 2025
     1 ІСТОРІЯ ЗМІН
     
     У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.
     
     Таблиця 1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
28.05.2025
0.1
Формування завдань для виконання до лабораторної роботи
2
29.05.2025
0.1
Опис виконаної роботи
3
30.05.2025
0.1
Формування результатів та висновків
4
30.05.2025
0.1
Формування додатків
     


2 ЗАВДАННЯ
     
     Метою лабораторної роботи є розробка клієнтської частини програмної системи FocusLearn, яка повинна забезпечувати веб-інтерфейс для роботи користувачів різних ролей (студенти, викладачі, адміністратори), підтримку інтернаціоналізації (українська та англійська мови), функціональність адміністрування системи. Також взаємодію з серверною частиною через REST API, сучасний, адаптивний користувацький інтерфейс.
     Веб-клієнт повинен підтримувати авторизацію користувачів через OAuth (Google, Facebook), управління профілем користувача, роботу з методиками концентрації та таймером, керування завданнями та навчальними матеріалами, перегляд статистики продуктивності та адміністрування користувачів та даних системи.
     


3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Програмна архітектура веб частини програмної системи

     У ході виконання лабораторної роботи було розроблено веб-клієнт програмної системи FocusLearn на основі компонентно-орієнтованої архітектури з використанням бібліотеки React.js. Архітектура реалізує принципи Single Page Application та забезпечує чітке розділення відповідальності між різними шарами системи.
     Архітектура веб-клієнта складається з трьох основних рівнів. Рівень представлення відповідає за відображення користувацького інтерфейсу та взаємодію з користувачем через React компоненти для різних сторінок та елементів інтерфейсу, CSS модулі для стилізації компонентів, адаптивний дизайн з підтримкою різних пристроїв та систему маршрутизації через React Router. Рівень бізнес-логіки містить логіку роботи додатку та управління станом через React контексти для глобального стану, кастомні хуки для інкапсуляції бізнес-логіки, сервіси для обробки даних та взаємодії з API, а також утиліти для валідації, форматування та перетворення даних. Рівень доступу до даних забезпечує взаємодію з зовнішніми сервісами через API сервіси для роботи з REST endpoints, Axios для HTTP запитів з інтерцепторами, локальне збереження даних та обробку помилок.
     Для управління глобальним станом використовується Context API Pattern через AuthContext для управління авторизацією та LanguageContext для управління мовою інтерфейсу. API сервіси організовані як окремі модулі для кожної доменної області.

     3.2 Програмні технології та компоненти веб частини системи

     Основний технологічний стек веб-клієнта включає React.js версії 18.2.0 як основну бібліотеку для побудови користувацького інтерфейсу з використанням функціональних компонентів та хуків. React Router забезпечує декларативну маршрутизацію для SPA з захищеними маршрутами через PrivateRouteElement та програмною навігацією через useNavigate. Axios використовується як HTTP клієнт для взаємодії з REST API.
     Для реалізації інтернаціоналізації використовується React i18next як основна бібліотека. Додатково використовується i18next-browser-languagedetector для автоматичного визначення мови з браузера та збереження вибраної мови в localStorage.
     Для візуалізації статистичних даних використовується бібліотека Recharts, яка забезпечує побудову інтерактивних графіків та діаграм з адаптивними компонентами.
     Стилізація реалізована через CSS3 з кастомними властивостями, що визначають кольорову палітру, відступи, радіуси скруглення та тіні. Використовується адаптивний дизайн з Mobile-first підходом, CSS Grid та Flexbox для компоновки, а також медіа-запити для адаптивного дизайну.
     Структура проєкту організована в папці src з підпапками api для API сервісів, components для компонентів, context для React контекстів, pages для сторінок додатку, styles для глобальних стилів, utils для утиліт, locale для файлів перекладів та i18n для конфігурації інтернаціоналізації.
     
     3.3 Бізнес-логіка програмної системи у веб-клієнті

     Бізнес-логіка веб-клієнта включає управління методиками концентрації, де користувачі можуть вибирати та запускати різні техніки концентрації через MethodsPage. Після вибору методики запускається інтерактивний таймер з круговим прогресом та автоматичним переключенням між фазами роботи та відпочинку. Таймер використовує polling механізм для синхронізації з сервером кожну секунду через timerService.
     Студенти можуть переглядати доступні завдання, брати їх у роботу, подавати файли на перевірку та отримувати оцінки. Викладачі можуть створювати нові завдання, переглядати подані роботи та виставляти оцінки. Завдання фільтруються за статусами через assignmentService.filterAssignments (див. дод. В) з методами для різних категорій.
     Аналітика та статистика обробляється через StatisticsPage з підготовкою даних для візуалізації. Система збирає дані про використання методик концентрації, розраховує коефіцієнти продуктивності, визначає найефективніші методики та надає рекомендації для покращення. Дані групуються за періодами та обробляються для відображення в різних типах графіків.
     Валідація та обробка форм реалізована на клієнті з перевіркою обов'язкових полів, мінімальної довжини тексту, валідності URL адрес та інших параметрів. Помилки валідації відображаються користувачу у реальному часі з локалізованими повідомленнями.
     
     3.4 Захист даних у веб частині програмної системи

     Система безпеки веб-клієнта базується на JWT токенах для аутентифікації користувачів. Токени зберігаються в localStorage та автоматично додаються до заголовків HTTP запитів через Axios інтерцептори. При отриманні токену він встановлюється в authService.setAuthToken, а при його відсутності або інвалідності користувач перенаправляється на сторінку авторизації.
     Захищені маршрути реалізовані через компонент PrivateRouteElement (див. дод. В), який перевіряє стан авторизації користувача перед відображенням захищеного контенту. Неавторизовані користувачі автоматично перенаправляються на сторінку входу. Додатково здійснюється перевірка ролей користувачів, особливо для доступу до адміністративних функцій.
     Валідація даних проводиться на стороні клієнта перед відправленням на сервер. Перевіряється валідність URL адрес, довжина текстових полів, обов'язковість заповнення полів та інші параметри. 
     Для критичних операцій, таких як видалення акаунту або зміна статусу користувача, реалізовані модальні вікна підтвердження через ConfirmationModal (див. дод. В). Це запобігає випадковому виконанню небезпечних дій. Всі запити до API використовують HTTPS протокол для захисту даних під час передачі. 
     
     3.5 Взаємодія веб частини програмної системи з іншими компонентами програмної системи

     Веб-клієнт взаємодіє з серверною частиною через REST API endpoints з використанням HTTP протоколу. Базова конфігурація API встановлюється через змінну оточення REACT_APP_API_URL з fallback на localhost для розробки. Всі API сервіси організовані як окремі модулі з централізованою обробкою помилок та логуванням.
     Система обробляє різні типи відповідей від сервера, включаючи LocalizedResponseDTO для локалізованих відповідей. У profileService.getMyProfile реалізована логіка перевірки структури відповіді та витягування даних з різних форматів.
     Авторизація через зовнішні OAuth провайдери реалізована через перенаправлення на серверні endpoints authService.loginWithGoogle та loginWithFacebook. Після успішної авторизації сервер повертає JWT токен через URL параметри, який обробляється в AuthContext.
     Інтеграція з системою локалізації серверної частини здійснюється через profileService.changeLanguage, що дозволяє синхронізувати мовні налаштування між клієнтом та сервером. 
     
     3.6 Підтримка інтернаціоналізації у веб частині програмної системи

     Система інтернаціоналізації побудована на основі бібліотеки i18next. Конфігурація i18n включає підтримку української та англійської мов з автоматичним визначенням мови користувача через браузер та збереженням вибраної мови в localStorage.
     Ресурси перекладів організовані в окремих JSON файлах для кожної мови в папці locale з підпапками uk та en. Структура перекладів ієрархічна з групуванням за функціональними областями системи. 
     Управління мовою реалізоване через LanguageContext (див. дод. В), який надає методи для зміни мови та список доступних мов з відповідними назвами. Контекст забезпечує глобальний доступ до мовних налаштувань у всіх компонентах додатку.
     Інтеграція з серверною системою локалізації дозволяє синхронізувати мовні налаштування користувача між клієнтом та сервером. При зміні мови в профілі користувача відбувається виклик API для збереження налаштувань на сервері.
     
     3.7 Адміністрування програмної системи у веб-клієнті
     
     Панель адміністратора включає управління користувачами системи з можливістю перегляду списку всіх користувачів, фільтрації за ролями та статусами, зміни статусу користувачів між активним та неактивним станами.
     Функціональність управління даними включає експорт даних у JSON форматі для різних таблиць системи через adminService.exportData. Адміністратор може обрати конкретні таблиці для експорту, включаючи користувачів, завдання, навчальні матеріали та IoT сесії.
     Система резервного копіювання дозволяє створювати повні бекапи бази даних через adminService.backupDatabase з збереженням файлів на сервері. Відновлення з резервних копій реалізоване через adminService.restoreDatabase з можливістю вказання кастомного шляху до файлу бекапу.
     Всі адміністративні операції захищені модальними вікнами підтвердження через ConfirmationModal для запобігання випадкового виконання критичних дій. Операції логуються та відображають статус виконання користувачу через систему повідомлень.



4 ВИСНОВКИ
     
     У результаті виконання лабораторної роботи було розроблено повноцінний веб-клієнт програмної системи FocusLearn з сучасною архітектурою на базі React.js. Реалізовано компонентно-орієнтований підхід з чітким розділенням відповідальності між рівнями представлення, бізнес-логіки та доступу до даних.
     Було впроваджено повноціну систему інтернаціоналізації з підтримкою української та англійської мов, створення адаптивного дизайну для різних пристроїв, реалізацію безпечної авторизації через OAuth провайдерів та JWT токени, а також інтеграцію з серверною частиною через REST API.
     Функціональні можливості охоплюють систему управління користувачами з різними ролями, інтерактивний таймер для методик концентрації з підтримкою різних технік, повний життєвий цикл управління завданнями та навчальними матеріалами, детальну статистику з інтерактивними графіками та аналітикою, а також повноцінну панель адміністрування з функціями експорту, імпорту та резервного копіювання даних.
     Скріншоти інтерфейсу наведені у дод. Г.
     

     ДОДАТОК А
     Відеозапис
     
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/dcT5cTsf6TI 
     Хронологічний опис відеозапису: 
     00:00 Вступ та огляд системи FocusLearn
     00:26 Система авторизації через OAuth (Google/Facebook)
     00:35 Головна сторінка та інтернаціоналізація
     01:08 Тестування методик концентрації та інтерактивного таймера
     02:00 Управління завданнями для студентів та викладачів
     03:23 Перегляд навчальних матеріалів
     03:50 Профіль користувача та налаштування
     04:15 Статистика та аналітика з інтерактивними графіками
     05:14 Робота із завданнями (створення, редагування, видалення)
     07:08 Робота з навчальними матеріалами (створення, редагування, видалення)
     08:06 Адміністративна панель (управління користувачами, експорт даних)
     10:18 Тестування адаптивності
     10:36 Висновки
     
     


     ДОДАТОК Б
     Графічні матеріали
     
      
     Рисунок Б.1 – ER-діаграма даних
     
      
     Рисунок Б.2 – Структура бази даних
      
     Рисунок Б.3 – UML-діаграма прецедентів
     
      
     Рисунок Б.4 – UML-діаграма розгортання
     
     
     Рисунок Б.5 – UML-діаграма діяльності для серверної частини
     
      
     Рисунок Б.6 — Діаграма компонентів програмної системи «FocusLearn»
     

     ДОДАТОК В
     Програмний код
     В.1 Основна структура додатку
     Файл: src/App.js
     GitHub репозиторій: 
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/App.js 
      1 import { Suspense } from 'react';
      2 import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
      3 import { AuthProvider, useAuth } from './context/AuthContext';
      4 import { LanguageProvider } from './context/LanguageContext';
      5 import './i18n';
      6 import LoginPage from './pages/LoginPage/LoginPage';
      7 import HomePage from './pages/HomePage/HomePage';
      8 import ProfilePage from './pages/ProfilePage/ProfilePage';
      9 import AssignmentsPage from './pages/AssignmentsPage/AssignmentsPage'
      10 import MaterialsPage from './pages/MaterialsPage/MaterialsPage';
      11 import MaterialDetailsPage from './pages/MaterialsPage/components/MaterialDetailsPage/MaterialDetailsPage';
      12 import MethodsPage from './pages/MethodsPage/MethodsPage';
      13 import StatisticsPage from './pages/StatisticsPage/StatisticsPage';
      14 import './styles/global.css';
      15
      16 // Компонент завантаження для Suspense
      17 const LoadingFallback = () => (
      18   <div className="loading-container">
      19     <div className="loading-spinner"></div>
      20     <p>Завантаження...</p>
      21   </div>
      22 );
      23 
      24 // Приватний маршрут
      25 const PrivateRouteElement = ({ element }) => {
      26   const { isAuthenticated, loading } = useAuth();
      27
      28   if (loading) {
      29     return <LoadingFallback />;
      30   }   
      31   return isAuthenticated ? element : <Navigate to="/login" />;
      32 };
      33 
      34 // Компонент маршрутів
      35 const AppRoutes = () => {
      36   return (
      37     <Routes>
      38       {/* Публічні маршрути */}
      39       <Route path="/login" element={<LoginPage />} />
      40
      41       {/* Захищені маршрути */}
      42       <Route path="/" element={<PrivateRouteElement element={<HomePage />} />} />
      43       <Route path="/profile" element={<PrivateRouteElement element={<ProfilePage />} />} />
      44       <Route path="/assignments" element={<PrivateRouteElement element={<AssignmentsPage />} />} />
      45       <Route path="/materials" element={<PrivateRouteElement element={<MaterialsPage />} />} />
      46       <Route path="/materials/:id" element={<PrivateRouteElement element={<MaterialDetailsPage />} />} />
      47       <Route path="/methods" element={<PrivateRouteElement element={<MethodsPage />} />} />
      48       <Route path="/statistics" element={<PrivateRouteElement element={<StatisticsPage />} />} />
      49       {/* Перенаправлення на login для невідомих маршрутів */}
      50       <Route path="*" element={<Navigate to="/login" />} />
      51     </Routes>
      52   );
      53 }; 
      54 // Головний компонент
      55 function App() {
      56   return (
      57     <Suspense fallback={<LoadingFallback />}>
      58       <Router>
      59         <LanguageProvider>
      60           <AuthProvider>
      61             <AppRoutes />
      62           </AuthProvider>
      63         </LanguageProvider>
      64       </Router>
      65     </Suspense>
      66   );
      67 }
      68 export default App;
     Файл: src/index.js
     GitHub репозиторій:
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/index.js  
      1 import React from 'react';
      2 import ReactDOM from 'react-dom/client';
      3 import './index.css';
      4 import App from './App';
      5 import reportWebVitals from './reportWebVitals';
      6 
      7 const root = ReactDOM.createRoot(document.getElementById('root'));
      8 root.render(
      9   <React.StrictMode>
      10     <App />
      11   </React.StrictMode>
      12 );
      13 reportWebVitals();
     В.2 Управління станом додатку
     Файл: src/contexts/AuthContext.js
     GitHub репозиторій:
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/contexts/AuthContext.js 
      1 import React, { createContext, useState, useEffect, useContext } from 'react';
      2 import authService from '../api/authService';
      3 
      4 const AuthContext = createContext();
      5 export const AuthProvider = ({ children }) => {
      6   const [user, setUser] = useState(null);
      7   const [loading, setLoading] = useState(true);
      8   const [error, setError] = useState(null);
      9   const [isAuth, setIsAuth] = useState(authService.isAuthenticated());
      10 
      11   useEffect(() => {
      12     const checkForToken = () => {
      13       try {
      14         const params = new URLSearchParams(window.location.search);
      15         const token = params.get('token');
      16         
      17         if (token) {
      18           authService.handleAuthResponse({ token });
      19           window.history.replaceState({}, document.title, window.location.pathname);
      20           setIsAuth(true);
      21           loadUser();
      22         }
      23       } catch (err) {
      24         console.error('Error processing URL token:', err);
      25       }
      26     };
      27     
      28     checkForToken();
      29   }, []);
      30 
      31   // Завантаження користувача при ініціалізації
      32   useEffect(() => {
      33     if (authService.isAuthenticated()) {
      34       loadUser();
      35     } else {
      36       setLoading(false);
      37     }
      38   }, []);
      39 
      40 const loadUser = async () => {
      41   try {
      42     if (authService.isAuthenticated()) {
      43       const userData = await authService.getCurrentUser();
      44       
      45       const userInfo = userData || null;
      46       
      47       //console.log('Processed user:', userInfo);
      48       
      49       setUser(userInfo);
      50       setIsAuth(!!userInfo);
      51     }
      52   } catch (error) {
      53     console.error('Error loading user:', error);
      54     setError(error.message);
      55     setIsAuth(false);
      56     if (error.response && error.response.status === 401) {
      57       authService.logout();
      58     }
      59   } finally {
      60     setLoading(false);
      61   }
      62 };
      63 
      64   // Функція для авторизації через Google
      65   const loginWithGoogle = async () => {
      66     try {
      67       await authService.loginWithGoogle();
      68     } catch (error) {
      69       setError(error.message);
      70       console.error("Error logging in with Google", error);
      71     }
      72   };
      73 
      74   // Функція для авторизації через Facebook
      75   const loginWithFacebook = async () => {
      76     try {
      77       await authService.loginWithFacebook();
      78     } catch (error) {
      79       setError(error.message);
      80       console.error("Error logging in with Facebook", error);
      81     }
      82   };
      83 
      84   // Функція для виходу з системи
      85   const logout = () => {
      86     authService.logout();
      87     setUser(null);
      88     setIsAuth(false);
      89   };
      90 
      91   // Функція для обробки відповіді від OAuth
      92   const handleAuthResponse = async (response) => {
      93     try {
      94       const result = await authService.handleAuthResponse(response);
      95       if (result) {
      96         setIsAuth(true);
      97         await loadUser();
      98         return true;
      99       }
      100       return false;
      101     } catch (error) {
      102       setError(error.message);
      103       console.error("Error handling auth response", error);
      104       return false;
      105     }
      106   };
      108   return (
      109     <AuthContext.Provider
      110       value={{
      111         user,
      112         loading,
      113         error,
      114         loginWithGoogle,
      115         loginWithFacebook,
      116         logout,
      117         handleAuthResponse,
      118         isAuthenticated: isAuth,
      119       }}>
      121       {children}
      122     </AuthContext.Provider>
      123   );
      124 };
      126 // Хук для використання контексту аутентифікації
      127 export const useAuth = () => {
      128   const context = useContext(AuthContext);
      129   if (!context) {
      130     throw new Error('useAuth must be used within an AuthProvider');
      131   }
      132   return context;
      133 };
      134 
      135 export default AuthContext;
     Файл src/context/LanguageContext.js
     GitHub репозиторій:
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/contexts/LanguageContext.js 
      1 import React, { createContext, useContext, useEffect, useState } from 'react';
      2 import { useTranslation } from 'react-i18next';
      3 
      4 const LanguageContext = createContext();
      5 
      6 export const LanguageProvider = ({ children }) => {
      7   const { i18n } = useTranslation();
      8   const [currentLanguage, setCurrentLanguage] = useState(i18n.language || 'uk');
      9 
      10   const changeLanguage = async (lng) => {
      11     try {      
      12       if (i18n && typeof i18n.changeLanguage === 'function') {
      13         await i18n.changeLanguage(lng);
      14         setCurrentLanguage(lng);
      15         
      16         localStorage.setItem('i18nextLng', lng);
      17         } else {
      18         console.error('i18n is not properly initialized');
      19       }
      20     } catch (error) {
      21       console.error('Error changing language:', error);
      22     }
      23   };
      24 
      25   const availableLanguages = [
      26     { code: 'uk', name: 'Українська', flag: '🇺🇦' },
      27     { code: 'en', name: 'English', flag: '🇺🇸' }
      28   ];
      29 
      30   useEffect(() => {
      31     if (i18n && i18n.language) {
      32       setCurrentLanguage(i18n.language);
      33     }
      34   }, [i18n.language]);
      35 
      36   return (
      37     <LanguageContext.Provider value={{
      38       currentLanguage,
      39       changeLanguage,
      40       availableLanguages,
      41       isRTL: false,
      42     }}>
      43       {children}
      44     </LanguageContext.Provider>
      45   );
      46 };
      47 
      48 export const useLanguage = () => {
      49   const context = useContext(LanguageContext);
      50   if (!context) {
      51     throw new Error('useLanguage must be used within a LanguageProvider');
      52   }
      53   return context;
      54 };
      55 export default LanguageContext;


     В.3 Фільтрація завдань за статусами (MyAssignmentsTabs.js)
     GitHub репозиторій:
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/pages/AssignmentsPage/components/MyAssignmentsTabs.js 
      1 const subTabs = useMemo(() => {
      2     if (!t) {
      3       console.warn('Translation function not available');
      4       return [];
      5     }
      6     try {
      7       if (userRole === 'Student') {
      8         return [
      9           {
      10             id: 'inProgress',
      11             label: t('assignments.subTabs.inProgress'),
      12             icon: 'fas fa-play-circle',
      13             filter: assignmentService.filterAssignments.myInProgress
      14           },
      15           {
      16             id: 'pending',
      17             label: t('assignments.subTabs.pending'),
      18             icon: 'fas fa-clock',
      19             filter: assignmentService.filterAssignments.myPending
      20           },
      21           {
      22             id: 'completed',
      23             label: t('assignments.subTabs.completed'),
      24             icon: 'fas fa-check-circle',
      25             filter: assignmentService.filterAssignments.myCompleted
      26           }
      27         ];
      28       } else {
      29         // Для викладачів
      30         return [
      31           {
      32             id: 'all',
      33             label: t('assignments.subTabs.allMy'),
      34             icon: 'fas fa-tasks',
      35             filter: assignmentService.filterAssignments.tutorAssignments
      36           },
      37           {
      38             id: 'active',
      39             label: t('assignments.subTabs.active'),
      40             icon: 'fas fa-play-circle',
      41             filter: (assignments, userId) => assignments.filter(a => 
      42               a.tutorId === userId && 
      43               a.status === 'InProgress'
      44             )
      45           },
      46           {
      47             id: 'graded',
      48             label: t('assignments.subTabs.graded'),
      49             icon: 'fas fa-star',
      50             filter: (assignments, userId) => assignments.filter(a => 
      51               a.tutorId === userId && 
      52               a.status === 'Completed'
      53             )
      54           }
      55         ];
      56       }
      57     } catch (error) {
      58       console.error('Error creating subTabs config:', error);
      59       return [];
      60     }
      61   }, [userRole, t]);

     В.4 Модальне вікно підтвердження (ConfirmationModal.js)
     GitHub репозиторій:
     https://github.com/NureSudakovaAlona/apz-pzpi-22-8-sudakova-alona/blob/main/Lab3/pzpi-22-8-sudakova-alona-lab3/focuslearn-client/src/components/common/ConfirmationModal/ConfirmationModal.js 
      1 import React from 'react';
      2 import { useTranslation } from 'react-i18next';
      3 import './ConfirmationModal.css';
      4 
      5 const ConfirmationModal = ({
      6   isOpen,
      7   onClose,
      8   onConfirm,
      9   title,
      10   message,
      11   confirmText,
      12   cancelText,
      13   confirmVariant = 'danger',
      14   icon = 'fas fa-exclamation-triangle',
      15   isLoading = false
      16 }) => {
      17   const { t } = useTranslation();
      18 
      19   // Ефект для керування overflow body
      20   React.useEffect(() => {
      21     if (isOpen) {
      22       document.body.style.overflow = 'hidden';
      23       return () => {
      24         document.body.style.overflow = 'unset';
      25       };
      26     }
      27   }, [isOpen]);
      28 
      29   // Ефект для обробки Escape
      30   React.useEffect(() => {
      31     if (!isOpen) return;
      32 
      33     const handleEscape = (e) => {
      34       if (e.key === 'Escape') {
      35         onClose();
      36       }
      37     };
      38 
      39     document.addEventListener('keydown', handleEscape);
      40     return () => {
      41       document.removeEventListener('keydown', handleEscape);
      42     };
      43   }, [isOpen, onClose]);
      44 
      45   if (!isOpen) return null;
      46 
      47   // Обробка кліку на overlay
      48   const handleOverlayClick = (e) => {
      49     if (e.target === e.currentTarget) {
      50       onClose();
      51     }
      52   };
      53 
      54   return (
      55     <div className="confirmation-modal-overlay" onClick={handleOverlayClick}>
      56       <div className="confirmation-modal">
      57         
      58         {/* Іконка та заголовок */}
      59         <div className="confirmation-modal-header">
      60           <div className={`confirmation-icon confirmation-icon-${confirmVariant}`}>
      61             <i className={icon}></i>
      62           </div>
      63           <h3 className="confirmation-title">
      64             {title || t('common.confirmation.title')}
      65           </h3>
      66         </div>
      67 
      68         {/* Повідомлення */}
      69         <div className="confirmation-modal-body">
      70           <p className="confirmation-message">
      71             {message || t('common.confirmation.message')}
      72           </p>
      73         </div>
      74 
      75         {/* Кнопки дій */}
      76         <div className="confirmation-modal-actions">
      77           <button
      78             type="button"
      79             className="confirmation-btn confirmation-btn-secondary"
      80             onClick={onClose}
      81             disabled={isLoading}
      82           >
      83             {cancelText || t('common.cancel')}
      84           </button>
      85           <button
      86             type="button"
      87             className={`confirmation-btn confirmation-btn-${confirmVariant}`}
      88             onClick={onConfirm}
      89             disabled={isLoading}
      90           >
      91             {isLoading ? (
      92               <>
      93                 <i className="fas fa-spinner fa-spin"></i>
      94                 {t('common.processing')}
      95               </>
      96             ) : (
      97               <>
      98                 <i className={icon}></i>
      99                 {confirmText || t('common.confirm')}
      100               </>
      101             )}
      102           </button>
      103         </div>
      104       </div>
      105     </div>
      106   );
      107 };
      108 export default ConfirmationModal;


     ДОДАТОК Г
     Скріншоти інтерфейсу веб-клієнта
     
     
     Рисунок Г.1 – Сторінка авторизації
     
     
     Рисунок Г.2 – Головна сторінка
     
     
     Рисунок Г.3 – Сторінка з методиками концентрацій
     
     
     Рисунок Г.4 – Сторінка активної сесії концентрації
     
     
     Рисунок Г.5 – Сторінка із завданнями
     
     
     Рисунок Г.6 – Модальне вікно деталей завдання
     
     
     Рисунок Г.7 – Сторінка особистого профілю
     
     
     Рисунок Г.8 – Сторінка статистики
     
     
     Рисунок Г.9 – Відображення даних користувача графічно
     
     
     Рисунок Г.10 – Персональні рекомендації 
     
     
     Рисунок Г.11 – Перегляд навчальних матеріалів
     
     
     Рисунок Г.12 – Редагування навчального матеріалу викладачем/адміном
     
     
     Рисунок Г.13 – Редагування завдання викладачем
     
     
     Рисунок Г.14 – Створення нового завдання викладачем
     
     
     Рисунок Г.15 – Адміністрування: зміна статусу користувачів
     
     
     
     Рисунок Г.16 – Адміністрування: управління даними системи

     
     Рисунок Г.17 – Адміністрування: модерація завдань
     
     
     Рисунок Г.18 – Інтернаціоналізація програмної системи
2


