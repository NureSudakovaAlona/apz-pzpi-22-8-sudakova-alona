МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра програмної інженерії




Практична робота №2
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Архітектура програмної системи Duolingo»




Виконала:
ст. гр. ПЗПІ-22-8
Судакова А.Д.
Перевірив:
ст. викл. кафедри ПІ
Сокорчук І.П.





Харків 2025
     1 ІСТОРІЯ ЗМІН
     
     У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.
     
     Таблиця 1 – Історія змін
№
Дата
Версія
Опис змін
Автор
1
29.03.2025
1.1
Створено розділ документ
Альона Судакова
2
29.03.2025
1.1
Додано опис архітектури
Альона Судакова
3
29.03.2025
1.1
Додано опис мікросервісів
Альона Судакова
4
29.03.2025
1.1
Додано опис системи адаптивного навчання
Альона Судакова
5
31.03.2025
1.1
Фінальне форматування документу
Альона Судакова
     


     2 ЗАВДАННЯ
     
     Метою даної практичної роботи було дослідження та аналіз архітектури програмної системи Duolingo. В рамках роботи необхідно було дослідити технологічний стек системи, проаналізувати архітектурні рішення та підходи до масштабування, а також розглянути особливості системи адаптивного навчання та механізми монетизації.
     Для виконання завдання потрібно було зібрати інформацію з різних джерел, включаючи офіційний блог Duolingo Engineering, технічні статті від розробників компанії, публічні виступи технічних лідерів та загальнодоступні матеріали про архітектуру системи. На основі цієї інформації необхідно було підготувати презентацію, що наочно демонструє архітектуру Duolingo, її компоненти та взаємозв'язки між ними.
     Завдання вимагало розуміння принципів архітектури програмного забезпечення, мікросервісного підходу, механізмів масштабування та застосування технологій машинного навчання в освітніх системах.
     

     3 ОПИС ВИКОНАНОЇ РОБОТИ
     
     В рамках практичної роботи було досліджено архітектуру програмної системи Duolingo — найпопулярнішої у світі платформи для вивчення мов. Дослідження охоплювало різні аспекти системи, від історії розвитку до технічних деталей реалізації.
     Duolingo — це програмна система для вивчення мов, яка використовує методи гейміфікації та адаптивного навчання. На сьогодні платформа має понад 500 мільйонів користувачів, пропонує курси з більш ніж 40 мов та доступна на веб-платформі та мобільних пристроях (iOS, Android). Компанія була заснована в 2011 році Луїсом фон Аном (також відомим як творець CAPTCHA) та Северином Хекером як дослідницький проєкт в Університеті Карнегі-Меллон. 
     Еволюція архітектури Duolingo демонструє типовий шлях зростання успішної програмної системи. У 2011-2013 роках початкова версія Duolingo була побудована як моноліт на Python з фреймворком Django, використовувалась єдина PostgreSQL база даних, а фронтенд був реалізований з використанням Backbone.js. У 2014-2016 роках, з ростом кількості користувачів та функціональності, виникла потреба в розподілі системи, початковий моноліт був розділений на декілька менших сервісів, впроваджено REST API для комунікації між сервісами. Протягом 2017-2019 років відбулась розробка та впровадження алгоритмів адаптивного навчання, перехід від простих REST API до GraphQL, а також використання React для фронтенду веб-версії та React Native для мобільних додатків. У 2020-2023 роках компанія здійснила повний перехід до хмарної інфраструктури AWS, впровадила Kubernetes для оркестрації контейнерів та почала використовувати великі мовні моделі (LLM) для покращення навчальних матеріалів.
     Duolingo використовує сучасний технологічний стек. Серверна частина (бекенд) включає Python з Django як історичну основу, Scala для обробки даних та аналітики, а також GraphQL API для інтеграції з клієнтами. Клієнтська частина (фронтенд) побудована на React.js для веб-інтерфейсу, React Native для мобільних додатків, з використанням Redux для управління станом, Swift для iOS-специфічних компонентів та Kotlin для Android-специфічних компонентів. Інфраструктура базується на AWS як основному хмарному провайдері, з використанням Kubernetes для оркестрації контейнерів, Docker для контейнеризації, AWS EKS для управління Kubernetes кластерами та CloudFront для CDN.
     В сучасній реалізації Duolingo використовує розвинену мікросервісну архітектуру. Сервіс управління користувачами відповідає за реєстрацію, автентифікацію та профілі користувачів. Сервіс навчальних матеріалів управляє уроками, вправами та навчальним планом. Сервіс прогресу навчання відстежує досягнення користувача та зберігає історію відповідей. Сервіс гейміфікації реалізує лідерборди, систему досягнень та рівні користувача. Сервіс рекомендацій забезпечує персоналізацію навчального шляху та A/B тестування методик. Сервіс повідомлень відповідає за push-сповіщення та нагадування. Сервіс оплати керує підписками та рекламою. 
     Однією з ключових технологічних переваг Duolingo є система адаптивного навчання, яка ґрунтується на принципах когнітивної науки та машинного навчання. Вона використовує Spaced Repetition System для оптимального інтервалу повторень, Bayesian Knowledge Tracing для оцінки знань користувача, регресійні моделі для прогнозування забування матеріалу та кластеризацію користувачів для визначення оптимальних навчальних шляхів. В основі лежить алгоритм, схожий на Half-Life Regression, який оцінює "силу" запам'ятовування слів на основі історії відповідей та часу з моменту останнього повторення. Ця система дозволяє динамічно регулювати складність завдань, фокусуватися на проблемних темах, оптимізувати час навчання та підтримувати мотивацію.
     З метою масштабування Duolingo реалізувала стратегії горизонтального масштабування з auto-scaling групами, розподілу трафіку, використання контейнеризації. Висока доступність забезпечується розгортанням в кількох зонах доступності, автоматичним відновленням після збоїв та Circuit Breaker для запобігання каскадним відмовам. 
     Архітектура Duolingo також підтримує різні способи монетизації, включаючи Freemium модель з преміум підпискою Duolingo Plus, рекламу з A/B тестуванням форматів, сертифікаційні тести Duolingo English Test та корпоративні рішення. Технічна реалізація цих механізмів інтегрована в загальну архітектуру системи.
     У процесі свого розвитку Duolingo стикалася з рядом технологічних викликів, серед яких масштабування для сотень мільйонів користувачів, забезпечення низької затримки глобально, підтримка офлайн-режиму з синхронізацією та забезпечення ефективності адаптивного навчання. Ці виклики були вирішені через перехід до мікросервісної архітектури, розподілене розгортання, механізми вирішення конфліктів при синхронізації та розробку власних алгоритмів машинного навчання.
     


     4 ВИСНОВКИ З РОБОТИ
     
     В ході виконання практичної роботи було досліджено архітектуру програмної системи Duolingo – найпопулярнішої у світі платформи для вивчення мов. Аналіз показав, що Duolingo представляє собою сучасну масштабовану архітектуру, побудовану на принципах мікросервісного підходу з використанням хмарних технологій.
     Було простежено еволюцію архітектури Duolingo від початкової монолітної системи до сучасної мікросервісної екосистеми, що включає сервіси, оптимізовані для конкретних завдань. 
     В результаті дослідження було дійдено до висновку, що архітектура Duolingo є прикладом ефективного балансу між технічною досконалістю та бізнес-цілями. Система забезпечує високу доступність, масштабованість та гнучкість.
     Виконання цієї практичної роботи дозволило поглибити розуміння сучасних підходів до архітектури масштабованих систем, особливостей мікросервісної архітектури та застосування технологій машинного навчання в реальних продуктах.

     ДОДАТОК А
     Відеозапис доповіді на YouTube: https://youtu.be/KsQHhqtIRns
     00:00 Вступ та представлення теми доповіді про архітектуру програмної системи Duolingo
     00:14 Огляд структури доповіді та ключових аспектів, що будуть розглянуті
     00:30 Загальна характеристика Duolingo як найпопулярнішої платформи для вивчення мов та історія її створення
     01:05 Еволюція архітектури Duolingo від монолітної до мікросервісної та впровадження машинного навчання
     02:30 Розбір архітектурних компонентів та технологічного стеку Duolingo
     03:22 Аналіз загальної архітектури Duolingo з поясненням взаємодії між клієнтською та серверною частинами
     04:05 Пояснення мікросервісної архітектури та взаємодії між окремими сервісами в системі Duolingo
     05:00 Розбір системи адаптивного навчання та її ролі в персоналізації освітнього процесу
     05:45 Демонстрація та пояснення прикладу алгоритму адаптивного навчання з Python-кодом
     06:58 Особливості зберігання та обробки даних у Duolingo: шардинг, реплікація, кешування
     07:47 Стратегії масштабування та забезпечення високої доступності для підтримки мільйонів користувачів
     08:45 Бізнес-модель та підходи до монетизації платформи: преміум-підписка, реклама, сертифікаційні тести
     09:45 Підсумки та висновки щодо архітектури Duolingo, її еволюції та технологічних переваг
     10:40 Огляд використаних джерел інформації та додаткових ресурсів для вивчення теми
     11:00 Завершення доповіді


     ДОДАТОК Б
     Слайди презентації доповіді
     
     
     Рисунок Б.1 – Титульний слайд презентації
     
     
     Рисунок Б.2 – Зміст презентації
     
     
     Рисунок Б.3 – Загальна інформація стосовно системи

     
     Рисунок Б.4 – Історія розвитку архітектури системи
     
     
     
     Рисунок Б.5 – Архітектурні компоненти та технології системи
     
     
     Рисунок Б.6 – Технологічний стек програми
     
     
     
     Рисунок Б.7 – Технологічний стек програми (продовження)
     
     
     Рисунок Б.8 – Загальна архітектура системи
     
     
     
     Рисунок Б.9 – Мікросервісна архітектура системи
     
     
     Рисунок Б.10 – Мікросервісна архітектура системи (продовження)
     
     
     Рисунок Б.11 – Опис алгоритму адаптивного навчання
     
     
     Рисунок Б.12 – Приклад реалізації алгоритму
     
     
     Рисунок Б.13 – Приклад реалізації алгоритму (продовження)
     
     
     Рисунок Б.14 – Використані джерела
     
     
     Рисунок Б.15 – Масштабування програми
     
     
     Рисунок Б.16 – Монетизація програми
     
     
     Рисунок Б.17 – Висновки з виконання роботи
     
     
     Рисунок Б.18 – Використані під час підготовки роботи джерела
     
     
     Рисунок Б.19 – Заключний слайд
     
     
     
     
     

     ДОДАТОК В
     Програмний код
     
      1  import random
      2 
      3  class AdaptiveLearningSystem:
      4     def __init__(self):
      5         self.user_level = 1  # Початковий рівень користувача
      6         self.mastery_threshold = 0.8  # Поріг майстерності для переходу на наступний рівень
      7 
      8     def assess_knowledge(self, correct_answers, total_questions):
      9         """
      10         Оцінює рівень знань користувача на основі кількості правильних відповідей.
      11         """
      12         accuracy = correct_answers / total_questions
      13         if accuracy >= self.mastery_threshold:
      14             self.user_level += 1  # Підвищення рівня при досягненні порогу майстерності
      15         elif accuracy < 0.5:
      16             self.user_level = max(1, self.user_level - 1)  # Зниження рівня при низькій успішності
      17 
      18     def select_next_exercise(self):
      19         """
      20         Вибирає наступне завдання відповідно до поточного рівня користувача.
      21         """
      22         exercises = {
      23             1: ['Завдання 1.1', 'Завдання 1.2', 'Завдання 1.3'],
      24             2: ['Завдання 2.1', 'Завдання 2.2', 'Завдання 2.3'],
      25             3: ['Завдання 3.1', 'Завдання 3.2', 'Завдання 3.3'],
      26             # Додаткові рівні та завдання можуть бути додані тут
      27         }
      28         return random.choice(exercises.get(self.user_level, ['Завдання за замовчуванням']))
      29 
      30     def adapt_difficulty(self, response_time):
      31         """
      32         Адаптує складність завдань на основі часу відповіді користувача.
      33         """
      34         if response_time < 5:  # Швидка відповідь
      35             self.user_level += 1
      36         elif response_time > 15:  # Повільна відповідь
      37             self.user_level = max(1, self.user_level - 1)
      38 
      39  # Приклад використання
      40  learning_system = AdaptiveLearningSystem()
      41 
      42  # Симуляція відповідей користувача
      43  learning_system.assess_knowledge(correct_answers=8, total_questions=10)
      44  next_exercise = learning_system.select_next_exercise()
      45  print(f"Наступне завдання: {next_exercise}")
      46 
      47  # Симуляція часу відповіді
      48  learning_system.adapt_difficulty(response_time=12)
      49  print(f"Поточний рівень користувача: {learning_system.user_level}")
